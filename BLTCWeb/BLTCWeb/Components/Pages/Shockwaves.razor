@page "/shockwaves"
@using System.Net.Http.Json
@using MudBlazor
@using Bulk_Log_Comparison_Tool.DataClasses
@using System.Drawing;
@using System.Drawing.Drawing2D;
@using System.Drawing.Imaging;
@rendermode InteractiveServer

@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />
<div style="overflow-x: auto;">
    <MudGrid>
        <MudItem>
        <MudTooltip Text="Player is dead when shockwave passes">
            <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(-1,"death").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="Player got hit by shockwave, but was protected by stability">
                <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(-1,"shield").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="Player did not get hit by the shockwave, and was protected by stability">
                <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(-1,"jumped").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="Player is down when the shockwave hits them / gets downed by the shockwave">
                <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(-1,"down").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="Player did not get hit by the shockwave, but also did not have stability">
                <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(-1,"warning").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudFlexBreak/>
        <MudTooltip Text="This colour represents mordremoth shockwaves">
            <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(0,"jumped").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="This colour represents soo-won shockwaves">
            <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(1,"jumped").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
        <MudItem>
        <MudTooltip Text="This colour represents obliterator shockwaves">
            <MudImage Src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(imageGenerator.GetImage(2,"jumped").BytesFromImage()))" />
        </MudTooltip>
        </MudItem>
    </MudGrid>
    <MudTable Items="@LogParser.BulkLog.GetPlayers()"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              LoadingProgressColor="MudBlazor.Color.Info"
              Class="flex-table">
        <HeaderContent>
            <MudTh>Player</MudTh>
            @foreach (var log in LogParser.BulkLog.Logs)
            {
                if(log.GetShockwaves(0).Count() > 0){
                <MudTh>@log.GetFileName()</MudTh>
                }
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context</MudTd>
            @foreach(var log in LogParser.BulkLog.Logs){
                if(log.GetShockwaves(0).Count() > 0){
                    var data = GetImageForPlayer(log, @context);
                    if(data.Length > 0){
                    <MudTd>
                <MudImage src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(GetImageForPlayer(log, @context)))" />
                        </MudTd>
                    }
                    else
                    {
                    <MudTd/>
                        
                    }
                }
            }
        </RowTemplate>
    </MudTable>
</div>

@code {

    private WebImageGenerator imageGenerator = new WebImageGenerator();
    private byte[] GetImageForPlayer(IParsedEvtcLog Log, string Player)
    {
        var shockwaves = GetShockwaves(Log, 0);
        shockwaves = shockwaves.Concat(GetShockwaves(Log, 1)).ToList();
        shockwaves = shockwaves.Concat(GetShockwaves(Log, 2)).ToList();
        return imageGenerator.GetImageBytes(Log, Player, shockwaves); ;
    }

    private List<(long, int)> GetShockwaves(IParsedEvtcLog Log, int shockwaveType)
    {
        List<(long, int)> shockwaves = new();
        foreach (var shockwave in Log.GetShockwaves(shockwaveType))
        {
            shockwaves.Add((shockwave, shockwaveType));
        }
        return shockwaves;
    }
}
