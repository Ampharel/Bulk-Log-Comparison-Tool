@page "/boons"
@using System.Net.Http.Json
@using MudBlazor
@using MudBlazor.Components.Chart.Models
@using Bulk_Log_Comparison_Tool.Util;
@rendermode InteractiveServer

<h3>Boons</h3>

@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />


<div style="overflow-x: auto;">

    <div>
        <MudRadioGroup Value="@_selectedBoon" ValueChanged="ValueChanged">
            @foreach (var boonName in LogParser.BulkLog.GetBoonNames())
            {
                <MudRadio Value="@boonName" Color="Color.Primary">@boonName</MudRadio>
            }
        </MudRadioGroup>
    </div>
    <MudTable Items="@LogParser.BulkLog.Logs"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              LoadingProgressColor="Color.Info"
              Class="flex-table">
        <HeaderContent>
            <MudTh>File</MudTh>
            <MudTh>Graph</MudTh>
        </HeaderContent>
        <RowTemplate>
            @{
                var data = Series[context.GetFileName()];
            }
            <MudTd>@context.GetFileName()</MudTd>
            <MudTimeSeriesChart ChartType="ChartType.Line" ChartSeries="@data" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" CanHideSeries Width="100%" Height="350px" ChartOptions="@Options" />
        </RowTemplate>
    </MudTable>
</div>

@code {

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();

    public Dictionary<string, List<TimeSeriesChartSeries>> Series = new();
    public string[] XAxisLabels = {};
    private string _selectedBoon = "Might";
    public EventCallback<string> ValueChanged;

    private void OnNewData()
    {
        Series = new();
        var phase = "";

        foreach (var Log in LogParser.BulkLog.Logs)
        {
            Series.Add(Log.GetFileName(), new List<TimeSeriesChartSeries>());
            var boonStackType = Log.GetBoonStackType(_selectedBoon);
            var duration = (boonStackType == BuffStackTyping.Queue || boonStackType == BuffStackTyping.Regeneration) ? true : false;
            foreach(var Player in Log.GetPlayers())
            {
                List<TimeSeriesChartSeries.TimeValue> chartData = new List<TimeSeriesChartSeries.TimeValue>();
                for (long i = Log.GetPhaseStart(phase); i < Log.GetPhaseEnd(phase); i += 1000)
                {
                    var boonAtTime = (int)Log.GetBoon(Player, _selectedBoon, phase, i, duration);
                    chartData.Add(new TimeSeriesChartSeries.TimeValue(new DateTime(i),boonAtTime));
                }
                var chartSeries = new TimeSeriesChartSeries() { Name = Player, Data = chartData, Type = TimeSeriesDiplayType.Area };
                Series[Log.GetFileName()].Add(chartSeries);
            }
            foreach(var Group in Log.GetGroups())
            {
                List<TimeSeriesChartSeries.TimeValue> chartData = new List<TimeSeriesChartSeries.TimeValue>();
                for (long i = Log.GetPhaseStart(phase); i < Log.GetPhaseEnd(phase); i += 1000)
                {
                    var boonAtTime = (int)Log.GetBoon(Group, _selectedBoon, phase, i, duration);
                    chartData.Add(new TimeSeriesChartSeries.TimeValue(new DateTime(i),boonAtTime));
                }
                var chartSeries = new TimeSeriesChartSeries() { Name = $"Group {Group}", Data = chartData, Type = TimeSeriesDiplayType.Area };
                Series[Log.GetFileName()].Add(chartSeries);
            }
        }
        Options.YAxisTicks = 10;
        StateHasChanged();
    }

    private void OnBoonSelectionChanged(string boon){
        _selectedBoon = boon;
        OnNewData();
    }

    protected override void OnInitialized()
    {
        ValueChanged = EventCallback.Factory.Create<string>(this, OnBoonSelectionChanged);
        Console.WriteLine("Boons Page Initialized");
        LogParser.NewDataEvent += OnNewData;
    }
}
