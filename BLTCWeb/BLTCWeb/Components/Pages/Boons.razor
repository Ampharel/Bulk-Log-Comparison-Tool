@page "/boons"
@using System.Net.Http.Json
@using MudBlazor
@using MudBlazor.Components.Chart.Models
@using Bulk_Log_Comparison_Tool.Util;
@rendermode InteractiveServer

<h3>Boons</h3>

@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />


<div style="overflow-x: auto;">

    <div>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton>@_selectedPhase</MudButton>
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                    @foreach (var log in LogParser.BulkLog.GetPhases())
                {
                    <MudMenuItem OnClick="() => SetPhase(log)">@log</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton>@_chartDisplayMode.ToString()</MudButton>
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                    <MudMenuItem OnClick="() => SetMode(ChartDisplayMode.GraphPerLog)">Graph Per Log</MudMenuItem>
                    <MudMenuItem OnClick="() => SetMode(ChartDisplayMode.GraphPerPlayer)">Graph Per Player</MudMenuItem>
                    <MudMenuItem OnClick="() => SetMode(ChartDisplayMode.LostTimings)">Boon lost timings</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
            <MudCheckBox Value="@_showPlayers" ValueChanged="ShowPlayersChanged" Color="Color.Primary">Players</MudCheckBox>
            <MudCheckBox Value="@_showGroups" ValueChanged="ShowGroupsChanged" Color="Color.Primary">Groups</MudCheckBox>
            <MudRadioGroup Value="@_selectedBoon" ValueChanged="SelectedBoonChanged">
            @foreach (var boonName in LogParser.BulkLog.GetBoonNames())
            {
                <MudRadio Value="@boonName" Color="Color.Primary">@boonName</MudRadio>
            }
        </MudRadioGroup>
    </div>
    @if (_chartDisplayMode == ChartDisplayMode.GraphPerLog)
    {
        <MudTable Items="@LogParser.BulkLog.Logs"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  LoadingProgressColor="Color.Info"
                  Class="flex-table">
            <HeaderContent>
                <MudTh>File</MudTh>
                <MudTh>Graph</MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    if (Series.Count() == 0)
                    {
                        OnNewData();
                    }
                    var data = Series[context.GetFileName()];
                }
                <MudTd>@context.GetFileName()</MudTd>
                    <MudTimeSeriesChart ChartType="ChartType.Line" TimeLabelFormat="mm:ss" TimeLabelSpacing="@_graphSpacing" ChartSeries="@data" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" CanHideSeries Width="100%" Height="350px" ChartOptions="@Options" />
             </RowTemplate>
         </MudTable>
    }
    else if(_chartDisplayMode == ChartDisplayMode.GraphPerPlayer)
    {
        <MudTable Items="@LogParser.BulkLog.GetPlayers()"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  LoadingProgressColor="Color.Info"
                  Class="flex-table">
            <HeaderContent>
                <MudTh>File</MudTh>
                <MudTh>Graph</MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    var data = Series[context];
                }
                <MudTd>@context</MudTd>
                    <MudTimeSeriesChart ChartType="ChartType.Line" TimeLabelFormat="mm:ss" TimeLabelSpacing="@_graphSpacing" ChartSeries="@data" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" CanHideSeries Width="100%" Height="350px" ChartOptions="@Options" />
             </RowTemplate>
         </MudTable>
    }
    else if(_chartDisplayMode == ChartDisplayMode.LostTimings)
    {
        <MudTable Items="@LogParser.BulkLog.GetPlayers()"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  LoadingProgressColor="Color.Info"
                  Class="flex-table">
            <HeaderContent>
                @foreach(var log in @LogParser.BulkLog.Logs)
                {
                    <MudTh>log.GetFileName()</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context</MudTd>

                @foreach(var log in @LogParser.BulkLog.Logs)
                {
                    <MudTd>@_buffLostTimings[log.GetFileName()][context]</MudTd>
                }
             </RowTemplate>
         </MudTable>
    }
</div>

@code {

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();

    private enum ChartDisplayMode
    {
        GraphPerLog,
        GraphPerPlayer,
        LostTimings
    }
    private ChartDisplayMode _chartDisplayMode = ChartDisplayMode.GraphPerLog;
    public Dictionary<string, List<TimeSeriesChartSeries>> Series = new();
    private Dictionary<string, Dictionary<string, string>> _buffLostTimings = new Dictionary<string, Dictionary<string, string>>();
    public string[] XAxisLabels = {};
    private string _selectedBoon = "Might";
    private string _selectedPhase = "";
    private bool _showPlayers = true;
    private bool _showGroups = true;
    public EventCallback<string> SelectedBoonChanged;
    public EventCallback<bool> ShowPlayersChanged;
    public EventCallback<bool> ShowGroupsChanged;

    private TimeSpan _graphSpacing = TimeSpan.FromSeconds(30);

    private void OnNewData()
    {
        Series = new();
        _buffLostTimings = new();

        foreach (var Log in LogParser.BulkLog.Logs)
        {
            _buffLostTimings.Add(Log.GetFileName(), new Dictionary<string, string>());
            if (_chartDisplayMode == ChartDisplayMode.GraphPerLog){
                Series.Add(Log.GetFileName(), new List<TimeSeriesChartSeries>());
            }
            var boonStackType = Log.GetBoonStackType(_selectedBoon);
            var duration = (boonStackType == BuffStackTyping.Queue || boonStackType == BuffStackTyping.Regeneration) ? true : false;
            if (_showPlayers)
            {
                var hasBuff = true;
                foreach (var Player in Log.GetPlayers())
                {
                    if (!_buffLostTimings[Log.GetFileName()].ContainsKey(Player))
                    {
                        _buffLostTimings[Log.GetFileName()].Add(Player, "");
                    }
                    if (_chartDisplayMode != ChartDisplayMode.GraphPerLog && !Series.ContainsKey(Player))
                    {
                        Series.Add(Player, new List<TimeSeriesChartSeries>());
                    }
                    List<TimeSeriesChartSeries.TimeValue> chartData = new List<TimeSeriesChartSeries.TimeValue>();
                    for (long i = Log.GetPhaseStart(_selectedPhase); i < Log.GetPhaseEnd(_selectedPhase); i += 1000)
                    {
                        var boonAtTime = (int)Log.GetBoon(Player, _selectedBoon, _selectedPhase, i, duration);
                        if(boonAtTime == 0 && hasBuff){
                            hasBuff = false;
                            _buffLostTimings[Log.GetFileName()][Player] += ("" + (i / 1000f).ToString("0.##") + " ");
                        }
                        else if(boonAtTime > 0){
                            hasBuff = true;
                        }
                        chartData.Add(new TimeSeriesChartSeries.TimeValue(new DateTime(i * 10000), boonAtTime));
                    }
                    _graphSpacing = TimeSpan.FromSeconds(Math.Round(chartData.Select(x => x.DateTime.Ticks).Max()/100000L * 1.0f)*10);
                    if (_chartDisplayMode == ChartDisplayMode.GraphPerLog)
                    {
                        var chartSeries = new TimeSeriesChartSeries() { Name = Player, Data = chartData, Type = TimeSeriesDiplayType.Line };
                        Console.WriteLine($"Log: {Log.GetFileName()}");
                        Series[Log.GetFileName()].Add(chartSeries);
                    }
                    else
                    {
                        var chartSeries = new TimeSeriesChartSeries() { Name = Log.GetFileName(), Data = chartData, Type = TimeSeriesDiplayType.Line };
                        Console.WriteLine($"Player: {Player}");
                        Series[Player].Add(chartSeries);
                    }
                }
            }
            if (_showGroups)
            {
                foreach (var Group in Log.GetGroups())
                {
                    if (_chartDisplayMode != ChartDisplayMode.GraphPerLog && !Series.ContainsKey(Group.ToString()))
                    {
                        Series.Add(Group.ToString(), new List<TimeSeriesChartSeries>());
                    }
                    List<TimeSeriesChartSeries.TimeValue> chartData = new List<TimeSeriesChartSeries.TimeValue>();
                    for (long i = Log.GetPhaseStart(_selectedPhase); i < Log.GetPhaseEnd(_selectedPhase); i += 500)
                    {
                        var boonAtTime = (int)Log.GetBoon(Group, _selectedBoon, _selectedPhase, i, duration);
                        chartData.Add(new TimeSeriesChartSeries.TimeValue(new DateTime(i*10000), boonAtTime));
                    }
                    if (_chartDisplayMode == ChartDisplayMode.GraphPerLog)
                    {
                        var chartSeries = new TimeSeriesChartSeries() { Name = Group.ToString(), Data = chartData, Type = TimeSeriesDiplayType.Line };
                        Series[Log.GetFileName()].Add(chartSeries);
                    }
                    else
                    {
                        var chartSeries = new TimeSeriesChartSeries() { Name = Log.GetFileName(), Data = chartData, Type = TimeSeriesDiplayType.Line };
                        Series[Group.ToString()].Add(chartSeries);
                    }
                }
            }
        }
        Options.YAxisTicks = 5;
        Options.XAxisLines = true;
        Options.YAxisLines = true;
        Options.YAxisRequireZeroPoint = true;

        StateHasChanged();
    }

    private void OnBoonSelectionChanged(string boon){
        _selectedBoon = boon;
        OnNewData();
    }

    protected override void OnInitialized()
    {
        SelectedBoonChanged = EventCallback.Factory.Create<string>(this, OnBoonSelectionChanged);
        ShowPlayersChanged = EventCallback.Factory.Create<bool>(this, UpdateShowPlayers);
        ShowGroupsChanged = EventCallback.Factory.Create<bool>(this, UpdateShowGroups);
        Console.WriteLine("Boons Page Initialized");
        LogParser.NewDataEvent += OnNewData;

    }

    private void UpdateShowPlayers(bool show){
        _showPlayers = show;
        OnNewData();
    }

    private void UpdateShowGroups(bool show){
        _showGroups = show;
        OnNewData();
    }

    private void SetMode(ChartDisplayMode mode)
    {
        _chartDisplayMode = mode;
        OnNewData();
    }

    private void SetPhase(string text)
    {
        _selectedPhase = text;
        OnNewData();
    }
}
