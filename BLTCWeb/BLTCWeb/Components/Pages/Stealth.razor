@page "/stealth"
@using System.Net.Http.Json
@using MudBlazor
@using Bulk_Log_Comparison_Tool.LibraryClasses
@rendermode InteractiveServer

@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />


<div style="overflow-x: auto;">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@_selectedPhase</MudButton>
        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            @foreach (var log in LogParser.BulkLog.GetStealthPhases())
            {
                <MudMenuItem OnClick="() => SetButtonText(log)">@log</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>

    <MudTable Items="@LogParser.BulkLog.GetPlayers().Take(1)"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info"
              Class="flex-table">
        <HeaderContent>
            @foreach (var log in LogParser.BulkLog.Logs)
            {
                <MudTh>@log.GetFileName()</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                @{

                    @foreach (var log in LogParser.BulkLog.Logs)
                    {
                    var results = log.GetStealthTimeline().GetStealthResults(_selectedPhase);
                    if (results.Count() > 0)
                        {
                        var FirstResult = results.First();
                        var stealthTime = FirstResult.StealthTime / 1000f;
                        <MudTimeline TimelineAlign="TimelineAlign.Start">
                                <MudTimelineItem Color="Color.Info" Size="Size.Small">
                                    <ItemContent>
                                        <MudText Typo="Typo.h6">Stealth</MudText>
                                    </ItemContent>
                                <ItemDot>@stealthTime</ItemDot>
                                </MudTimelineItem>

                            @for (double i = stealthTime; i < stealthTime + 6.0f; i++)
                            {
                                    var currTime = i;
                                    var timedResults = results.Where(x => (x.Time / 1000f) >= currTime && (x.Time / 1000f) <= currTime + 1);
                                    var hide = timedResults.Count() == 0;

                                <MudTimelineItem Color="Color.Info" Size="Size.Small" HideDot="@hide">
                                        <ItemDot>@currTime.ToString("0.##")</ItemDot>
                                    <ItemContent>
                                        @foreach (var result in timedResults.Select(result => $"{result.Player} : {result.Reason} @ {(result.Time/1000f).ToString("0.##")}"))
                                        {
                                            <MudText Typo="Typo.h6">@result</MudText>
                                        }
                                    </ItemContent>
                                    <ItemOpposite>
                                            <br /><br /><br />
                                    </ItemOpposite>
                                </MudTimelineItem>

                                }
                        </MudTimeline>
                        }
                    }
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

<MudSwitch @bind-Value="_hidePosition" Color="Color.Primary">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
<MudSwitch @bind-Value="_loading" Color="Color.Primary">Show Loading</MudSwitch>

@code {
    private bool _hidePosition;
    private bool _loading;
    private string _selectedPhase = "Choose a phase";
    private List<string> _stealthResults = new List<string>();

    private void SetButtonText(string text)
    {
        _selectedPhase = text;
    }
}
