@page "/stealth"
@using System.Net.Http.Json
@using MudBlazor
@using Bulk_Log_Comparison_Tool.LibraryClasses
@rendermode InteractiveServer

@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />


<div style="overflow-x: auto;">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@_selectedPhase</MudButton>
        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            @foreach (var log in LogParser.BulkLog.GetStealthPhases())
            {
                <MudMenuItem OnClick="() => SetButtonText(log)">@log</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>

    <MudTable Items="@LogParser.BulkLog.Logs"
              Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading"
              LoadingProgressColor="Color.Info"
              Class="flex-table">
        <HeaderContent>
            <MudTh>@_selectedPhase</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd>@context.GetFileName()</MudTd>
                <MudTd Style="align-content:start">
                    @{
                        var right = true;
                        var rightStyle = "text-align:right";
                        var leftStyle = "text-align:left";
                        var stealthTimeline = context.GetStealthTimeline().GetStealthResults(_selectedPhase);
                        if (stealthTimeline.Phase.Equals(_selectedPhase))
                        {
                            var phaseTime = stealthTimeline.PhaseEnd / 1000f;
                            var miTime = stealthTimeline.MassInvisTime / 1000f;
                            var stealthTime = stealthTimeline.StealthEventTime / 1000f;

                            var StealthColour = Color.Success;
                            if(stealthTime - phaseTime > 3.0)
                            {
                                StealthColour = Color.Error;
                            }
                            else if(stealthTime - phaseTime > 2.0){
                                StealthColour = Color.Warning;
                            }
                            else if(stealthTime - phaseTime < 0.0)
                            {
                                StealthColour = Color.Error;
                            }
                            <MudTimeline TimelineAlign="TimelineAlign.Start">
                                <MudTimelineItem Color="Color.Info" Size="Size.Small">
                                    <ItemContent>
                                    <MudText Typo="Typo.h6">@phaseTime.ToString("0.##"): Phasing</MudText>
                                    </ItemContent>
                                </MudTimelineItem>
                                <MudTimelineItem Color="@StealthColour" Size="Size.Small">
                                    <ItemContent>
                                    <MudText Typo="Typo.h6" Style="text-align:right">@miTime.ToString("0.##"): Mass Invis</MudText>
                                    </ItemContent>
                                        <ItemOpposite>
                                    @if(!stealthTimeline.HadQuickness){
                                            <MudText Typo="Typo.h6" Color="Color.Error">No quickness</MudText>
                                        }
                                        </ItemOpposite>
                                </MudTimelineItem>
                                <MudTimelineItem Color="@StealthColour" Size="Size.Small">
                                    <ItemContent>
                                    <MudText Typo="Typo.h6">@stealthTime.ToString("0.##"): Stealth</MudText>
                                    </ItemContent>
                                </MudTimelineItem>

                            @for (double i = stealthTime; i < stealthTime + 6.0f; i++)
                            {
                                var currentStyle = leftStyle;
                                if (right)
                                {
                                    currentStyle = rightStyle;
                                }
                                right = !right;
                                var currTime = i;
                                    var timedResults = stealthTimeline.Results.Where(x => (x.Time / 1000f) >= currTime && (x.Time / 1000f) <= currTime + 1);
                                    var hide = timedResults.Count() == 0;
                                    var bold = false;
                                    var fontweight = "font-weight:normal";
                                    <MudTimelineItem Color="Color.Info" Size="Size.Small" HideDot="@hide">
                                        <ItemDot>@currTime.ToString("0.##")</ItemDot>
                                    <ItemContent>
                                        @foreach (var result in timedResults.Where(x => !x.Reason.Equals("Stealth timeout")).Select(result => $"{result.Player} : {result.Reason} @ {(result.Time/1000f).ToString("0.##")}"))
                                        {
                                            var style = $"{fontweight};{currentStyle}";
                                            <MudText Style=@style Typo="Typo.body1">@result</MudText>
                                            if (bold)
                                            {
                                                bold = false;
                                                fontweight = "font-weight:normal";
                                            }
                                            else
                                            {
                                                bold = true;
                                                fontweight = "font-weight:bold";
                                            }
                                        }
                                    </ItemContent>
                                    <ItemOpposite>
                                            <br /><br /><br />
                                    </ItemOpposite>
                                </MudTimelineItem>

                            }
                            @{

                                var endStyle = leftStyle;
                                var stealthEnd = stealthTime + 6.0f;
                                if (right)
                                {
                                    endStyle = rightStyle;
                                }
                                right = !right;
                            <MudTimelineItem Color="Color.Info" Size="Size.Small">
                                <ItemContent>
                                        <MudText Style=@endStyle Typo="Typo.h6">@stealthEnd.ToString("0.##"): Stealth Timeout</MudText>
                                </ItemContent>
                                </MudTimelineItem>
                            }
                    </MudTimeline>
                    }
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

<MudSwitch @bind-Value="_hidePosition" Color="Color.Primary">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
<MudSwitch @bind-Value="_loading" Color="Color.Primary">Show Loading</MudSwitch>

@code {
    private bool _hidePosition;
    private bool _loading;
    private string _selectedPhase = "Choose a phase";
    private List<string> _stealthResults = new List<string>();

    private void SetButtonText(string text)
    {
        _selectedPhase = text;
    }
}
