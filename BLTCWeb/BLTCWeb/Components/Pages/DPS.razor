@page "/dps"
@using System.Net.Http.Json
@using MudBlazor
@using System.Globalization
@using Bulk_Log_Comparison_Tool.DataClasses
@using System.Linq
@rendermode InteractiveServer

@inject ServerParser LogParser
@inject SpecFilterService SpecFilter
<LogDrawer OnUpload="StateHasChanged" />
<div style="overflow-x: auto;">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@_selectedPhase</MudButton>
        <MudMenu Value=@_selectedPhase Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            @foreach (var log in LogParser.BulkLog.GetPhases(["Breakbar","Purification"]))
            {
                <MudMenuItem OnClick="() => UpdatePhase(log)">@log</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>

    <MudRadioGroup Value="@_cumulative" ValueChanged="UpdateCumulativeEvent">
        <MudRadio Value="false" Color="Color.Primary">Per Second</MudRadio>
        <MudRadio Value="true" Color="Color.Primary">Cumulative</MudRadio>
    </MudRadioGroup>

    <MudRadioGroup Value="@_defiance" ValueChanged="UpdateDefianceEvent">
        <MudRadio Value="false" Color="Color.Primary">Damage</MudRadio>
        <MudRadio Value="true" Color="Color.Primary">Defiance</MudRadio>
    </MudRadioGroup>

    <MudRadioGroup Value="@_allTargets" ValueChanged="UpdateAllTargetsEvent">
        <MudRadio Value="false" Color="Color.Primary">SingleTarget</MudRadio>
        <MudRadio Value="true" Color="Color.Primary">AllTargets</MudRadio>
    </MudRadioGroup>

    <MudTable Items="@GetSortedPlayers()"
    Hover="true"
    Dense="true"
    Breakpoint="Breakpoint.Sm"
    LoadingProgressColor="Color.Info"
    Class="flex-table">
        <HeaderContent>
            <MudTh Class="sticky-col col-1">Player</MudTh>
            <MudTh Class="sticky-col col-2">Specializations</MudTh>
            @foreach (var log in GetFilteredLogs())
            {
                <MudTh @onclick="() => OnSort(log.GetFileName())" Style="cursor:pointer">@log.GetFileName()</MudTh>
            }
            <MudTh @onclick='() => OnSort("Average")' Style="cursor:pointer">Average</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd Class="sticky-col col-1">@context</MudTd>
            <MudTd Class="sticky-col col-2">
                @{
                    var specs = LogParser.GetPlayerSpecs(context);
                    var images = imageGenerator.GetSpecializationImages(specs);
                    for (int i = 0; i < specs.Length; i++)
                    {
                        var specId = specs[i];
                        var filter = SpecFilter.IsEnabled(context, specId) ? "none" : "grayscale(1) opacity(0.5)";
                        var style = $"cursor:pointer; margin-right:4px; filter:{filter};";

                        <span style="@style" @onclick="@(() => SpecFilter.Toggle(context, specId))">
                            <MudImage ObjectPosition="@ObjectPosition.Center" Src="@($"data:image/png;base64,{Convert.ToBase64String(images[i].BytesFromImage())}")" />
                        </span>
                    }
                }
            </MudTd>
            @{
                var TotalDps = 0.0;
                var TotalLogs = 0;
                foreach (var log in GetFilteredLogs())
                {
                    var dps = log.GetPlayerDps(@context, _selectedPhase, _allTargets, _cumulative, _defiance);
                    <MudTd>@dps.ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                    if(dps > 0){
                        TotalDps += dps;
                        TotalLogs++;
                    }
                }
                if (TotalLogs > 0)
                {
                    var averageDps = TotalDps / TotalLogs;
                    <MudTd>@averageDps.ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                }
            }
        </RowTemplate>
    </MudTable>
</div>

@code {
    private bool _cumulative = false;
    private bool _defiance = false;
    private bool _allTargets = false;
    private string _selectedPhase = "";

    private WebImageGenerator imageGenerator = new();
    public EventCallback<bool> UpdateCumulativeEvent;
    public EventCallback<bool> UpdateDefianceEvent;
    public EventCallback<bool> UpdateAllTargetsEvent;
    public EventCallback<string> UpdatePhaseEvent;

    private string? _sortColumn;
    private bool _sortDescending;

    private void UpdatePhase(string phase)
    {
        _selectedPhase = phase;
        OnNewData();
    }

    private void OnNewData()
    {
        StateHasChanged();
    }

    private void UpdateCumulative(bool value)
    {
        _cumulative = value;
        OnNewData();
    }

    private void UpdateDefiance(bool value)
    {
        _defiance = value;
        OnNewData();
    }

    private void UpdateAllTargets(bool value)
    {
        _allTargets = value;
        OnNewData();
    }

    private IParsedEvtcLog[] GetFilteredLogs()
    {
        return SpecFilter.FilterLogs(LogParser.BulkLog.Logs).ToArray();
    }


    protected override void OnInitialized()
    {
        UpdateCumulativeEvent = EventCallback.Factory.Create<bool>(this, UpdateCumulative);
        UpdateDefianceEvent = EventCallback.Factory.Create<bool>(this, UpdateDefiance);
        UpdateAllTargetsEvent = EventCallback.Factory.Create<bool>(this, UpdateAllTargets);
        UpdatePhaseEvent = EventCallback.Factory.Create<string>(this, UpdatePhase);
        LogParser.NewDataEvent += OnNewData;
    }

    private IEnumerable<string> GetSortedPlayers()
    {
        var players = LogParser.BulkLog.GetPlayers().AsEnumerable();
        if (!string.IsNullOrEmpty(_sortColumn))
        {
            if (_sortColumn == "Average")
            {
                players = _sortDescending
                    ? players.OrderByDescending(p =>
                        {
                            var logs = GetFilteredLogs();
                            var values = logs.Select(l => l.GetPlayerDps(p, _selectedPhase, _allTargets, _cumulative, _defiance)).Where(v => v > 0);
                            return values.Any() ? values.Average() : 0;
                        })
                    : players.OrderBy(p =>
                        {
                            var logs = GetFilteredLogs();
                            var values = logs.Select(l => l.GetPlayerDps(p, _selectedPhase, _allTargets, _cumulative, _defiance)).Where(v => v > 0);
                            return values.Any() ? values.Average() : 0;
                        });
            }
            else
            {
                var log = LogParser.BulkLog.Logs.FirstOrDefault(l => l.GetFileName() == _sortColumn);
                if (log != null)
                {
                    players = _sortDescending
                        ? players.OrderByDescending(p => log.GetPlayerDps(p, _selectedPhase, _allTargets, _cumulative, _defiance))
                        : players.OrderBy(p => log.GetPlayerDps(p, _selectedPhase, _allTargets, _cumulative, _defiance));
                }
            }
        }
        return players;
    }

    private void OnSort(string column)
    {
        if (_sortColumn == column)
        {
            _sortDescending = !_sortDescending;
        }
        else
        {
            _sortColumn = column;
            _sortDescending = true;
        }
        StateHasChanged();
    }

}
