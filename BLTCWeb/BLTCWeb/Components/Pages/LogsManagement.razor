@page "/logsmanagement"
@using MudBlazor
@using System.IO.Compression
@rendermode InteractiveServer
<h3>LogManagement</h3>
@inject ServerParser LogParser

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                      AppendMultipleFiles
                    Hidden="@false"
                    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                    InputStyle="opacity:0"
                    tabindex="-1"
                    @ondrop="@ClearDragClass"
                    @ondragenter="@SetDragClass"
                    @ondragleave="@ClearDragClass"
                    @ondragend="@ClearDragClass">
         <ActivatorContent>
             <MudPaper Height="300px"
                       Outlined="true"
                       Class="@_dragClass">
                 <MudText Typo="Typo.h6">
                     Drag and drop files here or click
                 </MudText>
                 @foreach (var file in _fileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Upload
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!_fileNames.Any())"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>
@code {
    #nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<IBrowserFile> _fileNames = new();
    private Queue<IBrowserFile> _newFiles = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private const int MaxFileSize = 1024 * 1024 * 10; // 10MB

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file);
            _newFiles.Enqueue(file);
        }
    }

    private void Upload()
    {
        new Task(async () =>
        {
            while (_newFiles.TryDequeue(out var file))
            {
                using (MemoryStream ms = new())
                {
                    await file.OpenReadStream(maxAllowedSize: MaxFileSize).CopyToAsync(ms);
                    ms.Position = 0;
                    using (MemoryStream? unpackedMemoryStream_ = new MemoryStream())
                    {

                        ZipArchive val = new ZipArchive(ms, (ZipArchiveMode)0);
                        try
                        {
                            if (val.Entries.Count != 1)
                            {
                                Console.WriteLine("Invalid file");
                                return;
                            }
                            using Stream stream = val.Entries[0].Open();
                            stream.CopyTo(unpackedMemoryStream_);
                            unpackedMemoryStream_.Position = 0L;
                        }
                        finally
                        {
                            ((IDisposable)val)?.Dispose();
                        }

                        LogParser.AddLog(unpackedMemoryStream_, file.Name);
                    }
                }
            }
        }).Start();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
