@page "/mechanics"
@using System.Net.Http.Json
@using MudBlazor
@using Bulk_Log_Comparison_Tool.DataClasses
@rendermode InteractiveServer

@inject ServerParser LogParser
@inject SpecFilterService SpecFilter
<LogDrawer OnUpload="StateHasChanged" />
<div style="overflow-x: auto;">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@_selectedPhase</MudButton>
            <MudMenu Value=@_selectedPhase Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            @foreach (var log in LogParser.BulkLog.GetPhases(["Breakbar"]))
            {
                <MudMenuItem OnClick="() => UpdatePhase(log)">@log</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>

    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@_selectedMechanic</MudButton>
            <MudMenu Value=@_selectedMechanic Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @foreach (var mechanic in LogParser.BulkLog.GetMechanicNames(_selectedPhase))
            {
                <MudMenuItem OnClick="() => UpdateMechanics(mechanic)">@mechanic</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>

    <MudRadioGroup Value="@_count" ValueChanged="UpdateCountEvent">
        <MudRadio Value="false" Color="Color.Primary">Time</MudRadio>
        <MudRadio Value="true" Color="Color.Primary">Count</MudRadio>
    </MudRadioGroup>

    <MudTable Items="@LogParser.BulkLog.GetPlayers()"
              Hover="true"
              Dense="true"
              Breakpoint="Breakpoint.Sm"
              LoadingProgressColor="Color.Info"
              Class="flex-table">
        <HeaderContent>
            <MudTh Class="sticky-col col-1">Player</MudTh>
            <MudTh Class="sticky-col col-2">Specializations</MudTh>
            @foreach (var log in GetFilteredLogs())
            {
                <MudTh>@log.GetFileName()</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="sticky-col col-1">@context</MudTd>
            <MudTd Class="sticky-col col-2">
                @{
                    var specs = LogParser.GetPlayerSpecs(context);
                    var images = imageGenerator.GetSpecializationImages(specs);
                    for (int i = 0; i < specs.Length; i++)
                    {
                        var specId = specs[i];
                        var filter = SpecFilter.IsEnabled(context, specId) ? "none" : "grayscale(1) opacity(0.5)";
                        var style = $"cursor:pointer; margin-right:4px; filter:{filter};";

                        <span style="@style" @onclick="@(() => SpecFilter.Toggle(context, specId))">
                            <MudImage ObjectPosition="@ObjectPosition.Center" Src="@($"data:image/png;base64,{Convert.ToBase64String(images[i].BytesFromImage())}")" />
                        </span>
                    }
                }
            </MudTd>
                @foreach (var log in GetFilteredLogs())
            {
                var mechanics = log.GetMechanicLogs(_selectedMechanic, _selectedPhase).Where(x => x.Item1.Equals(context)).Select(x => (x.Item2 / 1000f).ToString("0.#"));
                if(mechanics.Count() == 0)
                {
                    <MudTd></MudTd>
                }
                else{
                    if (_count)
                    {
                        <MudTd>@mechanics.Count()</MudTd>
                    }
                    else
                    {
                        <MudTd>@mechanics.Aggregate((current, next) => $"{current}, {next}")</MudTd>
                    }
                }
            }
        </RowTemplate>
    </MudTable>
</div>

@code {
    private WebImageGenerator imageGenerator = new();
    public EventCallback<bool> UpdateCountEvent;
    private string _selectedPhase = "";
    private string _selectedMechanic = "";
    private bool _count = false;

    private void UpdatePhase(string phase)
    {
        _selectedPhase = phase;
        OnNewData();
    }
    private void UpdateMechanics(string mechanic)
    {
        _selectedMechanic = mechanic;
        OnNewData();
    }

   private void UpdateCount(bool count)
    {
        _count = count;
        OnNewData();
    }

    private void OnNewData()
    {
        StateHasChanged();
    }

    private IParsedEvtcLog[] GetFilteredLogs()
    {
        return SpecFilter.FilterLogs(LogParser.BulkLog.Logs).ToArray();
    }

    protected override void OnInitialized()
    {
        UpdateCountEvent = EventCallback.Factory.Create<bool>(this, UpdateCount);
        LogParser.NewDataEvent += OnNewData;
    }
}
