@page "/solid"
@using System.Net.Http.Json
@using Bulk_Log_Comparison_Tool.DataClasses
@using Bulk_Log_Comparison_Tool.LibraryClasses
@using MudBlazor
@using System.Globalization
@using Bulk_Log_Comparison_Tool.Util
@rendermode InteractiveServer

<h3>Solid Analysis</h3>
<MudText>This tool is meant as a supporting tool to quickly check for obvious mistakes in a group of logs. This tool is not meant to replace manual inspection of these logs. Always check your logs before sending them in.</MudText>
@inject ServerParser LogParser
<LogDrawer OnUpload="StateHasChanged" />

<div style="overflow-x: auto;">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@selectedRole.ToString()</MudButton>
        <MudMenu Value=@selectedRole.ToString() Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            <MudMenuItem OnClick="() => UpdateSelectedRole(Role.DPS)">DPS</MudMenuItem>
            <MudMenuItem OnClick="() => UpdateSelectedRole(Role.Venticator)">Venticator</MudMenuItem>
            <MudMenuItem OnClick="() => UpdateSelectedRole(Role.HealKite)">HealKite</MudMenuItem>
            <MudMenuItem OnClick="() => UpdateSelectedRole(Role.QuickDps)">QuickDps</MudMenuItem>
            <MudMenuItem OnClick="() => UpdateSelectedRole(Role.Portal)">Portal</MudMenuItem>
        </MudMenu>
    </MudButtonGroup>

    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton>@selectedPlayer</MudButton>
        <MudMenu Value=@selectedPlayer Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
            @foreach (var player in LogParser.BulkLog.GetPlayers())
            {
                <MudMenuItem OnClick="() => UpdateSelectedPlayer(player)">@player</MudMenuItem>
            }
        </MudMenu>
    </MudButtonGroup>
    <MudDivider />
    <MudButton OnClick="OnGeneralExpandCollapseClick">@(_generalExpanded ? "General" : "General")</MudButton>
    <MudDivider />
    <MudCollapse Expanded="_generalExpanded">
        <MudCard>
            @* <MudItem> Removed due to unclear ToS legalities
            <MudText Typo="Typo.body1">Health: @selectedLog.GetPlayerHealth(selectedPlayer)</MudText>
        </MudItem> *@
            <MudTable Items="@LogParser.BulkLog.Logs"
            Hover="true"
            Dense="true"
            Breakpoint="Breakpoint.Sm"
            LoadingProgressColor="Color.Info"
            Class="flex-table">
                <HeaderContent>
                    <MudTh>Log</MudTh>
                    <MudTh>Reinforced Armor</MudTh>
                    <MudTh>Consumables</MudTh>
                    <MudTh>Downed</MudTh>
                    <MudTh>Eligibility</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.GetFileName()</MudTd>
                    <MudTd><MudCheckBox T="bool" Value="@context.HasReinforcedArmor(selectedPlayer)" Disabled="true">Reinforced Armor</MudCheckBox></MudTd>
                    @{
                        var consumables = context.GetConsumables(selectedPlayer);
                        var consumableString = consumables.Aggregate("", (current, consumable) => current + $"{ consumable}\n");
                        <MudTd><MudText Style="white-space: pre-line;">@consumableString</MudText></MudTd>
                        <MudTd>
                            @{
                                var downs = context.GetDownReasons(selectedPlayer);
                                var phaseStart = context.GetPhaseStart("Soo-Won 2");
                                downs = downs.Where(x => x.Item2 < phaseStart).ToList();
                                if(downs.Count() > 0){
                                    <MudTable Items="@downs"
                                    Hover="true"
                                    Dense="true"
                                    Breakpoint="Breakpoint.Sm"
                                    LoadingProgressColor="Color.Info"
                                    Class="flex-table">
                                        <HeaderContent>
                                            <MudTh>Downed</MudTh>
                                        </HeaderContent>
                                        <RowTemplate Context="downReason">
                                            <MudTd>
                                                <MudText Color="@Color.Error">@downReason.Item1 at @(downReason.Item2 / 1000)</MudText>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                }
                            }
                        </MudTd>
                        <MudTd>
                            <MudCheckBox T="bool" Value="@(context.GetPhases(["Goliath"], false).Count()>0)" Disabled="true">Reached Goliath</MudCheckBox>
                            <MudCheckBox T="bool" Value="@(context.GetMechanicLogs("Success Green", "Soo-Won 2").Count()>=3)" Disabled="true">Passed SW2 first green</MudCheckBox>
                        </MudTd>
                    }
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudCollapse>

    <MudDivider />
    <MudButton OnClick="OnRevealsExpandCollapseClick">@(_revealsExpanded ? "Reveals" : "Reveals")</MudButton>
    <MudDivider />
    <MudCollapse Expanded="_revealsExpanded">
        <MudCard>
            <MudTable Items="@LogParser.BulkLog.Logs"
            Hover="true"
            Dense="true"
            Breakpoint="Breakpoint.Sm"
            LoadingProgressColor="Color.Info"
            Class="flex-table">
                <HeaderContent>
                    <MudTh>Log</MudTh>
                    @foreach(var StealthPhase in LogParser.BulkLog.GetStealthPhases())
                    {
                        <MudTh>@StealthPhase</MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    @{
                        var stealths = context.GetStealthResult(selectedPlayer, Bulk_Log_Comparison_Tool.Enums.StealthAlgoritmns.OutlierFiltering);
                        <MudTd>@context.GetFileName()</MudTd>
                        foreach(var StealthPhase in LogParser.BulkLog.GetStealthPhases())
                        {
                            <MudTd>@stealths.FirstOrDefault(x => x.Item1.Equals(StealthPhase)).Item2</MudTd>
                        }
                    }
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudCollapse>

    <MudDivider />
    <MudButton OnClick="OnGeneralMechanicsExpandCollapseClick">@(_generalMechanicsExpanded ? "General Mechanics" : "General Mechanics")</MudButton>
    <MudDivider />
    <MudCollapse Expanded="_generalMechanicsExpanded">
        <MudCard>
            <MudText>This are mechanical failures untill SW2. The colour indicates how problematic the failure is.</MudText>
            <MudText>These mechanics could be caused by circumstances, so always doublecheck the log.</MudText>
            <MudTable Items="@LogParser.BulkLog.Logs"
            Hover="true"
            Dense="true"
            Breakpoint="Breakpoint.Sm"
            LoadingProgressColor="Color.Info"
            Class="flex-table">
                <HeaderContent>
                    <MudTh>Log</MudTh>
                    <MudTh>Last laughs</MudTh>
                    <MudTh>Champion Last laughs</MudTh>
                    <MudTh>Red bait</MudTh>
                    <MudTh>Spread bait</MudTh>
                    <MudTh>Spread overlap</MudTh>
                    <MudTh>Void Debuff</MudTh>
                    @* <MudTh>Gravity Crush</MudTh> *@
                    <MudTh>Mordemoth Shockwave</MudTh>
                    <MudTh>Mordemoth Poison</MudTh>
                    <MudTh>Giant's Puke</MudTh>
                    <MudTh>Giant's Scream</MudTh>
                    <MudTh>Giant's Stomp</MudTh>
                    <MudTh>Kralkatorrik Beam</MudTh>
                    <MudTh>Kralkatorrik River</MudTh>
                    <MudTh>Kralkatorrik Meteor</MudTh>
                    <MudTh>Zhaitan Poison</MudTh>
                    <MudTh>Soo-won Tsunami</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @{
                        var sw2Start = context.GetPhaseStart("Soo-Won 2");
                        if(sw2Start == 0)
                        {
                            sw2Start = context.GetPhaseEnd("Full Fight");
                        }
                        var sw2End = context.GetPhaseEnd("Soo-Won 2");
                        var voidExplosionCountPreSW2 = context.GetMechanicLogsForPlayer(selectedPlayer, "Void Explosion", "", 0, sw2Start).Count();
                        var championLastLaughCount = context.GetChampionLastLaugh(selectedPlayer, "Full Fight").Count();
                        var redBaitCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Red Bait", "", 0, sw2Start).Count();
                        var totalReds = context.GetMechanicLogs("Red Bait", "", 0, sw2Start).Select(x => x.Item2).GetUniqueElementsWithinTolerance(1000).Count();
                        var spreadBaitCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Spread Bait", "", 0, sw2Start).Count();
                        var totalSpreads = context.GetMechanicLogs("Spread Bait", "", 0, sw2Start).Select(x => x.Item2).GetUniqueElementsWithinTolerance(1000).Count();
                        var targetedExpulsionCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Targeted Expulsion (Spread)", "", 0, sw2Start).Count();
                        var voidDebuffCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Void Debuff", "", 0, sw2Start).Count();
                        var gravityCrushCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Gravity Crush", "", 0, sw2Start).Count();
                        var mordemothShockwaveCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Mordremoth Shockwave", "", 0, sw2Start).Count();
                        var mordemothPoisonCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Mordremoth Poison", "", 0, sw2Start).Count();
                        var giantPukeCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Rotting Bile", "", 0, sw2Start).Count();
                        var giantScreamCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Death Scream", "", 0, sw2Start).Count();
                        var giantStompCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Stomp", "", 0, sw2Start).Count();
                        var kralkatorrikBeamCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Kralkatorrik Beam", "", 0, sw2Start).Count();
                        var kralkatorrikRiverCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Kralkatorrik Void Pool", "", 0, sw2Start).Count();
                        var kralkatorrikMeteorCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Barrage", "", 0, sw2Start).Count();
                        var zhaitanPoisonCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Zhaitan Poison", "", 0, sw2Start).Count();
                        var tsunamiSlamCount = context.GetMechanicLogsForPlayer(selectedPlayer, "Tsunami Slam", "", 0, sw2Start).Count();

                        <MudTd>@context.GetFileName()</MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(voidExplosionCountPreSW2/5f,true)};")">@voidExplosionCountPreSW2</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(championLastLaughCount/1f,true)};")">@championLastLaughCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(totalReds > 0 ? redBaitCount/(float)totalReds : 0, selectedRole != Role.HealKite) };")">@redBaitCount / @totalReds</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(totalSpreads > 0 ? spreadBaitCount/(float)totalSpreads : 0, selectedRole == Role.DPS || selectedRole == Role.Venticator) };")">@spreadBaitCount / @totalSpreads</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(targetedExpulsionCount/1f,true)};")">@targetedExpulsionCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(voidDebuffCount/1f, true)};")">@voidDebuffCount</MudText></MudTd>
                        // <MudTd><MudText Style="@($"color:{GetColorFromPercentage(gravityCrushCount/50f, [1.0, 0.8, 0.6, 0.4, 0.2] , true)};")">@gravityCrushCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(mordemothShockwaveCount/1f, true)};")">@mordemothShockwaveCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(mordemothPoisonCount/1f, true)};")">@mordemothPoisonCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(giantPukeCount/1f, true)};")">@giantPukeCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(giantScreamCount/1f, true)};")">@giantScreamCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(giantStompCount/1f, true)};")">@giantStompCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(kralkatorrikBeamCount/1f, true)};")">@kralkatorrikBeamCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(kralkatorrikRiverCount/1f, true)};")">@kralkatorrikRiverCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(kralkatorrikMeteorCount/1f, true)};")">@kralkatorrikMeteorCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(zhaitanPoisonCount/1f, true)};")">@zhaitanPoisonCount</MudText></MudTd>
                        <MudTd><MudText Style="@($"color:{GetColorFromPercentage(tsunamiSlamCount/1f, true)};")">@tsunamiSlamCount</MudText></MudTd>
                    }
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudCollapse>

    <MudDivider />
    <MudButton OnClick="OnOrbPushingExpandCollapseClick">@(_orbPushingExpanded ? "Orb Pushing" : "Orb Pushing")</MudButton>
    <MudDivider />
    <MudCollapse Expanded="_orbPushingExpanded">
        <MudCard>
            <MudTable Items="@LogParser.BulkLog.Logs"
            Hover="true"
            Dense="true"
            Breakpoint="Breakpoint.Sm"
            LoadingProgressColor="Color.Info"
            Class="flex-table">
                <HeaderContent>
                    <MudTh>Log</MudTh>
                    <MudTh>Purification 1</MudTh>
                    <MudTh>Purification 2</MudTh>
                    <MudTh>Purification 3</MudTh>
                    <MudTh>Purification 4</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @{
                        <MudTd>@context.GetFileName()</MudTd>
                        <MudTd>@context.GetMechanicLogsForPlayer(selectedPlayer, "Orb Push", "Purification 1").Count()</MudTd>
                        <MudTd>@context.GetMechanicLogsForPlayer(selectedPlayer, "Orb Push", "Purification 2").Count()</MudTd>
                        <MudTd>@context.GetMechanicLogsForPlayer(selectedPlayer, "Orb Push", "Purification 3").Count()</MudTd>
                        <MudTd>@context.GetMechanicLogsForPlayer(selectedPlayer, "Orb Push", "Purification 4").Count()</MudTd>
                        //Add pushing direction
                    }
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudCollapse>

    <MudDivider />
    <MudButton OnClick="OnDefianceExpandCollapseClick">@(_defianceExpanded ? "Defiance" : "Defiance")</MudButton>
    <MudDivider />
    <MudCollapse Expanded="_defianceExpanded">
        <MudCard>
            <MudTable Items="@LogParser.BulkLog.Logs"
            Hover="true"
            Dense="true"
            Breakpoint="Breakpoint.Sm"
            LoadingProgressColor="Color.Info"
            Class="flex-table">
                <HeaderContent>
                    <MudTh>Log</MudTh>
                    @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar","Giants"], false))
                    {
                        <MudTh>@phase</MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.GetFileName()</MudTd>
                    @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar", "Giants"], false))
                    {
                        <MudTh>@context.GetPlayerDps(selectedPlayer, phase, true, true, true)</MudTh>
                    }
                </RowTemplate>
            </MudTable>
        </MudCard>
    </MudCollapse>

    <MudDivider />

    @if(selectedRole == Role.DPS || selectedRole == Role.Venticator || selectedRole == Role.Portal || selectedRole == Role.QuickDps)
    {
        <MudButton OnClick="OnDpsExpandCollapseClick">@(_dpsExpanded ? "Dps" : "Dps")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_dpsExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Damage per Second</MudText>
                </MudCardHeader>
                <MudTable Items="@LogParser.BulkLog.Logs"
                Hover="true"
                Dense="true"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                Class="flex-table">
                    <HeaderContent>
                        <MudTh>Log</MudTh>
                        @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar"]))
                        {
                            <MudTh>@phase</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.GetFileName()</MudTd>
                        @{
                            @foreach (var phase in context.GetPhases(["Breakbar"]))
                            {
                                var extra = "";
                                if (phase.Contains("Primordus"))
                                {
                                    if(context.GetPhaseEnd(phase) - context.GetPhaseStart(phase) <= 74162)
                                    {
                                        extra = "(1)";
                                    }
                                    else{
                                        extra = "(2)";
                                    }
                                }
                                <MudTh>@context.GetPlayerDps(selectedPlayer, phase, true, false, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU")) + extra</MudTh>
                            }
                        }
                    </RowTemplate>
                </MudTable>
            </MudCard>
        </MudCollapse>
    }
    <MudDivider />
    @if(selectedRole == Role.HealKite || selectedRole == Role.QuickDps)
    {
        var heal = selectedRole == Role.HealKite;
        List<string> boons = [];
        if (heal)
        {
            boons.Add("Alacrity");
            boons.Add("Regeneration");
        }
        else
        {
            boons.Add("Quickness");
        }
        boons.AddRange(["Might", "Fury", "Swiftness", "Protection"]);
        <MudButton OnClick="OnBoonsExpandCollapseClick">@(_boonsExpanded ? "Boons" : "Boons")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_boonsExpanded">
            @foreach (var boon in boons)
            {
                <MudCard>
                    <MudCardHeader>
                        <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="@(() => ToggleBoonExpand(boon))">
                            @boon
                            <MudIcon Icon="@(_boonExpanded.ContainsKey(boon) && _boonExpanded[boon] ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" />
                        </MudButton>
                    </MudCardHeader>
                    <MudCollapse Expanded="@(_boonExpanded.ContainsKey(boon) && _boonExpanded[boon])">
                        <MudTable Items="@LogParser.BulkLog.Logs"
                                  Hover="true"
                                  Dense="true"
                                  Breakpoint="Breakpoint.Sm"
                                  LoadingProgressColor="Color.Info"
                                  Class="flex-table">
                            <HeaderContent>
                                <MudTh>Log</MudTh>
                                @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar"]))
                                {
                                    <MudTh>@phase</MudTh>
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.GetFileName()</MudTd>
                                @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar"]))
                                {
                                    var boonStackType = context.GetBoonStackType(boon);
                                    var boonValue = context.GetBoon(context.GetPlayerGroup(selectedPlayer), boon, phase, ignoreKite: !heal);
                                    var boonColour = GetColorFromBoon(boonStackType, boonValue);
                                    <MudTh><MudText Style="@($"color:{boonColour};")">@BoonToString(boonStackType, boonValue)</MudText></MudTh>
                                }
                            </RowTemplate>
                        </MudTable>
                    </MudCollapse>
                </MudCard>
            }
        </MudCollapse>
        if(heal){
            <MudButton OnClick="OnChillExpandCollapseClick">@(_fearExpanded ? "Chill" : "Chill")</MudButton>
            <MudDivider />
            <MudCollapse Expanded="_chillExpanded">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Jormag</MudText>
                    </MudCardHeader>
                    <MudTable Items="@LogParser.BulkLog.Logs"
                    Hover="true"
                    Dense="true"
                    Breakpoint="Breakpoint.Sm"
                    LoadingProgressColor="Color.Info"
                    Class="flex-table">
                        <HeaderContent>
                            <MudTh>Log</MudTh>
                            <MudTh>Chills</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.GetFileName()</MudTd>
                            <MudTd>
                                <MudTable Items="@context.GetPlayers().Where(x => context.IsPlayerInGroup(x, context.GetPlayerGroup(selectedPlayer)))"
                                Hover="true"
                                Dense="true"
                                Breakpoint="Breakpoint.Sm"
                                LoadingProgressColor="Color.Info"
                                Class="flex-table">
                                    <HeaderContent>
                                        <MudTh>Player</MudTh>
                                        <MudTh>Chill</MudTh>
                                        <MudTh>Resistance</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="player">
                                        <MudTd>@player</MudTd>
                                        <MudTd>@context.GetBoon(player, "Chilled", "Jormag").ToString("P2")</MudTd>
                                        <MudTd>@context.GetBoon(player, "Resistance", "Jormag").ToString("P2")</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCard>
            </MudCollapse>
        }
        <MudButton OnClick="OnFearExpandCollapseClick">@(_fearExpanded ? "Fear" : "Fear")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_fearExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Zhaitan Fear</MudText>
                </MudCardHeader>
                <MudTable Items="@LogParser.BulkLog.Logs"
                Hover="true"
                Dense="true"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                Class="flex-table">
                    <HeaderContent>
                        <MudTh>Log</MudTh>
                        <MudTh>Fear 1</MudTh>
                        <MudTh>Fear 2</MudTh>
                        <MudTh>Fear 3</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.GetFileName()</MudTd>
                        @{
                            foreach (var fearTiming in context.GetZhaitanFearTimings())
                            {
                                <MudTd>
                                    <MudTable Items="@context.GetPlayers().Where(x => context.IsPlayerInGroup(x, context.GetPlayerGroup(selectedPlayer)))"
                                    Hover="true"
                                    Dense="true"
                                    Breakpoint="Breakpoint.Sm"
                                    LoadingProgressColor="Color.Info"
                                    Class="flex-table">
                                        <HeaderContent>
                                            <MudTh>Player</MudTh>
                                            <MudTh>Protection</MudTh>
                                            <MudTh>Resistance</MudTh>
                                            <MudTh>Cleanse Reactiontime</MudTh>
                                            <MudTh>Damage Reduction</MudTh>
                                        </HeaderContent>
                                        <RowTemplate Context="player">
                                            <MudTd>@player</MudTd>
                                            <MudTd>@context.GetBoon(player, "Protection", "", fearTiming, true)s</MudTd>
                                            <MudTd>@context.GetBoon(player, "Resistance", "", fearTiming, true)s</MudTd>
                                            <MudTd>@GetCleanseTime(@context, player, fearTiming)</MudTd>
                                            <MudTd>@GetDamageReduction(@context, player, fearTiming)</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudTd>
                            }
                        }
                    </RowTemplate>
                </MudTable>
            </MudCard>
        </MudCollapse>
        <MudButton OnClick="OnStabExpandCollapseClick">@(_stabExpanded ? "Mordremoth Stability" : "Mordremoth Stability")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_stabExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Mordemoth waves</MudText>
                </MudCardHeader>
                <MudLink target="_blank" Href="https://htcm-log-analyser.glitch.me/">Use Mimi's tool to look at individual stability</MudLink>
                <MudTable Items="@LogParser.BulkLog.Logs"
                Hover="true"
                Dense="true"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                Class="flex-table">
                    <HeaderContent>
                        <MudTh>Log</MudTh>
                        <MudTh>Shockwaves</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.GetFileName()</MudTd>
                        @{
                            <MudTd>
                                <MudTable Items="@context.GetPlayers().Where(x => context.IsPlayerInGroup(x, context.GetPlayerGroup(selectedPlayer)))"
                                Hover="true"
                                Dense="true"
                                Breakpoint="Breakpoint.Sm"
                                LoadingProgressColor="Color.Info"
                                Class="flex-table">
                                    <HeaderContent>
                                        <MudTh>Player</MudTh>
                                        @for (int i = 1; i < context.GetShockwaves(0).Count() + 1; i++)
                                        {
                                            var waveIndex = i;
                                            <MudTh>Wave @waveIndex</MudTh>
                                        }
                                    </HeaderContent>
                                    <RowTemplate Context="player">
                                        <MudTd>@player</MudTd>
                                        @foreach (var shockwaveTiming in context.GetShockwaves(0))
                                        {
                                            <MudTd>@context.GetBoonAtTime(player, "Stability", shockwaveTiming) stacks</MudTd>
                                        }
                                    </RowTemplate>
                                </MudTable>
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            </MudCard>
        </MudCollapse>
    }
    @if(selectedRole == Role.DPS || selectedRole == Role.Venticator || selectedRole == Role.Portal || selectedRole == Role.QuickDps)
    {
        <MudButton OnClick="OnBurstExpandCollapseClick">@(_burstExpanded ? "Burst" : "Burst")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_burstExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Burst</MudText>
                </MudCardHeader>
                @{
                    var targetDamage = 350000;
                    if(selectedRole == Role.QuickDps)
                    {
                        targetDamage = 200000;
                    }
                    if(selectedRole == Role.Portal)
                    {
                        targetDamage = 275000;
                    }

                    <MudTable Items="@LogParser.BulkLog.Logs"
                    Hover="true"
                    Dense="true"
                    Breakpoint="Breakpoint.Sm"
                    LoadingProgressColor="Color.Info"
                    Class="flex-table">
                        <HeaderContent>
                            <MudTh>Log</MudTh>
                            <MudTh>Timecaster</MudTh>
                            <MudTh>Saltspray Dragon</MudTh>
                            <MudTh>Giants</MudTh>
                            <MudTh>Goliath</MudTh>
                            <MudTh>Obliterator</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.GetFileName()</MudTd>
                            <MudTd>@context.GetPlayerDps(selectedPlayer, "Void Time Caster", true, true, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                            <MudTd>@context.GetPlayerDps(selectedPlayer, "Void Saltspray Dragon", true, true, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                            <MudTd>@context.GetPlayerDps(selectedPlayer, 15000, "Giants", true, true, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                            <MudTd><MudText Style="@($"color:{GetColorFromPercentage(context.GetPlayerDps(selectedPlayer, 15000, "Void Goliath", false, true, false)/targetDamage)};")">@context.GetPlayerDps(selectedPlayer, 15000, "Void Goliath", false, true, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU")) / @((targetDamage).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU")))</MudText></MudTd>
                            <MudTd>@context.GetPlayerDps(selectedPlayer, 15000, "Void Obliterator", false, true, false).ToString("N0", CultureInfo.CreateSpecificCulture("ru-RU"))</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudCard>
        </MudCollapse>
    }
    @if(selectedRole == Role.Portal)
    {
        <MudButton OnClick="OnBoonstripExpandCollapseClick">@(_boonstripExpanded ? "Boonstrip" : "Boonstrip")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_boonstripExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Boonstrip</MudText>
                </MudCardHeader>
                <MudTable Items="@LogParser.BulkLog.Logs"
                Hover="true"
                Dense="true"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                Class="flex-table">
                    <HeaderContent>
                        <MudTh>Log</MudTh>
                        @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar"]))
                        {
                            <MudTh>@phase</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.GetFileName()</MudTd>
                        @foreach (var phase in LogParser.BulkLog.GetPhases(["Breakbar"]))
                        {
                            <MudTh>@context.GetBoonStripDuringPhase(selectedPlayer, phase)</MudTh>
                        }
                    </RowTemplate>
                </MudTable>
            </MudCard>
        </MudCollapse>
        <MudButton OnClick="OnMassInvisExpandCollapseClick">@(_massinvisExpanded ? "Mass Invis" : "Mass Invis")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_massinvisExpanded">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Mass Invisiblity</MudText>
                </MudCardHeader>
                <MudTable Items="@LogParser.BulkLog.Logs"
                Hover="true"
                Dense="true"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                Class="flex-table">
                    <HeaderContent>
                        <MudTh>Log</MudTh>
                        @foreach (var stealthPhase in LogParser.BulkLog.GetStealthPhases())
                        {
                            <MudTh>@stealthPhase</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.GetFileName()</MudTd>
                        @{
                            var stealthTimeline = context.GetStealthTimeline();
                            foreach (var stealthPhase in LogParser.BulkLog.GetStealthPhases())
                            {
                                <MudTh>@GetMassInvisString(stealthTimeline.GetStealthResults(stealthPhase))</MudTh>
                            }
                        }
                    </RowTemplate>
                </MudTable>
            </MudCard>
        </MudCollapse>
    }
</div>

@code {

    private bool _generalExpanded = false;
    private bool _revealsExpanded = false;
    private bool _generalMechanicsExpanded = false;
    private bool _orbPushingExpanded = false;
    private bool _defianceExpanded = false;
    private bool _boonsExpanded = false;
    private bool _fearExpanded = false;
    private bool _stabExpanded = false;
    private bool _chillExpanded = false;
    private bool _burstExpanded = false;
    private bool _massinvisExpanded = false;
    private bool _dpsExpanded = false;
    private bool _boonstripExpanded = false;

    private string selectedPlayer = "";
    private Role selectedRole = Role.DPS;

    private int _logCount = 0;

    private string GetMassInvisString(StealthTimeline Timeline)
    {
        return $"Mass Invis took {(Timeline.MassInvisTime - Timeline.PhaseEnd)/1000f} seconds";
    }

    private string GetCleanseTime(IParsedEvtcLog log, string player, long time)
    {
        var result = log.GetCleanseReactionTime(player, time);
        if (result.Item1 == "" && result.Item2 == 0)
        {
            return "No fear";
        }
        return $"{result.Item1}: {result.Item2 / 1000f} ({(time + result.Item2) / 1000f})";
    }

    private string GetDamageReduction(IParsedEvtcLog log, string player, long time)
    {
        var result = log.GetDamageReductionsAtTime(player, time);
        string resultString = "";
        foreach(string res in result)
        {
            resultString += " [ " + res + " ] ";
        }

        return resultString;
    }

    private void OnNewData()
    {
        StateHasChanged();
    }

    private double GetBoonDurationByPlayer(IParsedEvtcLog log, string target, string source, string boon, string phase, double endTime, double startTime)
    {
        var ProtEventsByPlayer = log.GetBoonTimedEvents(target, "Protection", "Zhaitan", source);
        var ProtEventsBeforeFear = ProtEventsByPlayer.Where(x => x.Item1 > startTime && x.Item1 < endTime).ToList();
        var protDuration = 0d;
        var prevTime = 0d;
        foreach (var protEvent in ProtEventsBeforeFear)
        {
            protDuration -= (protEvent.Item1 - prevTime);
            protDuration = Math.Max(protDuration, 0);
            prevTime = protEvent.Item1;
            protDuration += protEvent.Item2;
        }
        protDuration /= 1000;
        return protDuration;
    }    

    private Dictionary<string, bool> _boonExpanded = new();

    private void ToggleBoonExpand(string boon)
    {
        if (_boonExpanded.ContainsKey(boon))
            _boonExpanded[boon] = !_boonExpanded[boon];
        else
            _boonExpanded[boon] = true;
    }

    private void UpdateSelectedPlayer(string playerName)
    {
        selectedPlayer = playerName;
        OnNewData();
    }

    private void UpdateSelectedRole(Role role){
        selectedRole = role;
        OnNewData();
    }

    private void OnGeneralExpandCollapseClick()
    {
        _generalExpanded = !_generalExpanded;
    }

    private void OnRevealsExpandCollapseClick()
    {
        _revealsExpanded = !_revealsExpanded;
    }

    private void OnGeneralMechanicsExpandCollapseClick()
    {
        _generalMechanicsExpanded = !_generalMechanicsExpanded;
    }

    private void OnOrbPushingExpandCollapseClick()
    {
        _orbPushingExpanded = !_orbPushingExpanded;
    }

    private void OnDefianceExpandCollapseClick()
    {
        _defianceExpanded = !_defianceExpanded;
    }

    private void OnBoonsExpandCollapseClick()
    {
        _boonsExpanded = !_boonsExpanded;
    }

    private void OnChillExpandCollapseClick()
    {
        _chillExpanded = !_chillExpanded;
    }
    private void OnStabExpandCollapseClick()
    {
        _stabExpanded = !_stabExpanded;
    }
    private void OnFearExpandCollapseClick()
    {
        _fearExpanded = !_fearExpanded;
    }
    private void OnBurstExpandCollapseClick()
    {
        _burstExpanded = !_burstExpanded;
    }

    private void OnBoonstripExpandCollapseClick()
    {
        _boonstripExpanded = !_boonstripExpanded;
    }
    private void OnMassInvisExpandCollapseClick()
    {
        _massinvisExpanded = !_massinvisExpanded;
    }
    private void OnDpsExpandCollapseClick()
    {
        _dpsExpanded = !_dpsExpanded;
    }

    protected override void OnInitialized()
    {
        LogParser.NewDataEvent += OnNewData;
    }
    private enum Role
    {
        HealKite,
        QuickDps,
        Portal,
        DPS,
        Venticator
    }

    private string GetColorFromBoon(BuffStackTyping boonStackType, double value)
    {
        switch (boonStackType)
        {
            case BuffStackTyping.Queue:
            case BuffStackTyping.Regeneration:
                return GetColorFromPercentage(value);
            default:
                return GetColorFromBoonStacks(value);
        }
    }

    private string GetColorFromBoonStacks(double stacks)
    {
        return GetColorFromPercentage(stacks / 25.0);
    }

    private readonly double[] constThresholds = [ 1.0, 0.95, 0.9, 0.8, 0.5 ];

    private string GetColorFromPercentage(double percentage, bool reverse = false)
    {
        return GetColorFromPercentage(percentage, constThresholds, reverse);
    }

    private string GetColorFromPercentage(double percentage, double[] thresholds, bool reverse = false)
    {
        if(thresholds.Length < 5){
            thresholds = constThresholds;
        }
        if (percentage >= thresholds[0])
        {
            if(reverse){
                return Colors.Red.Darken4;
            }
            return Colors.Green.Darken1;
        }
        if (percentage > thresholds[1])
        {
            if (reverse)
            {
                return Colors.Orange.Darken1;
            }
            return Colors.LightGreen.Darken1;
        }
        if (percentage > thresholds[2])
        {
            if (reverse)
            {
                return Colors.Yellow.Darken1;
            }
            return Colors.Lime.Darken1;
        }
        if (percentage > thresholds[3])
        {
            if (reverse)
            {
                return Colors.Lime.Darken1;
            }
            return Colors.Yellow.Darken1;
        }
        if (percentage > thresholds[4])
        {
            if (reverse)
            {
                return Colors.LightGreen.Darken1;
            }
            return Colors.Orange.Darken1;
        }
        if (reverse)
        {
            return Colors.Green.Darken1;
        }
        return Colors.Red.Darken4;
    }

    private string BoonToString(BuffStackTyping boonStackType, double value)
    {
        switch(boonStackType){
            case BuffStackTyping.Queue:
            case BuffStackTyping.Regeneration:
                return value.ToString("P2");
            default:
                return value.ToString("N1");
        }
    }
}